<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">
	
	<insert id="insertFilmCategory" parameterType="java.util.Map">
		INSERT INTO film_category(
			film_id,
			category_id
		) VALUES (
			#{filmId},
			#{categoryId}
		)
	</insert>
	
	
	
	
	<!--  -->
	<insert id="insertFilm" parameterType="com.gd.sakila.vo.Film">
		<selectKey keyProperty="filmId" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()		<!-- 마지막으로 입력한 아이디 -->
		</selectKey>
		INSERT INTO film(
			title,
			description,
			release_year,
			language_id,
			original_language_id,
			rental_duration, 
			rental_rate,
			length,
			replacement_cost,
			rating,
			special_features
		) VALUES (
			#{title},
			#{description},
			#{releaseYear},
			#{languageId},
			#{originalLanguageId},
			#{rentalDuration},
			#{rentalRate},
			#{length},
			#{replacementCost},
			#{rating},
			#{specialFeatures}
		)
	</insert>
	
	
	
	<!-- 배우 삭제 -->
	<delete id="deleteActor" parameterType="int"> <!-- id가 int -->
		DELETE 
		FROM
			film_actor <!-- film_actor에서 -->
		WHERE
			film_id = #{filmId} <!-- 필름 아이디가 같아야 삭제가능 -->	
	</delete>
	
	
	
	<!-- 배우 입력 -->
	<insert id="insertActor" parameterType="java.util.Map">
		INSERT INTO
			film_actor(
						actor_id,
						film_id
			) VALUES (
						#{actorId},
						#{filmId}
			)
	</insert>
	
	
	
	<!-- actor(배우) -->
	<select id="selectFilmActorListByFilm" parameterType="int" resultType="java.util.Map">
		SELECT 
			a.actor_id actorId,
			CONCAT(first_name, ' ', last_name) name,
			film_id filmId
		FROM		
			actor a LEFT JOIN (
								SELECT *
								FROM film_actor
								WHERE film_id=#{filmId} ) t
			ON a.actor_id = t.actor_id	
		ORDER BY first_name ASC	
	</select>
	
	
	
	
	<!-- Map : filmId(in입력), storeId(in입력), filmCount(out.출력) -->
	<select id="selectFilmInStock" parameterType="java.util.Map" resultType="int" statementType="CALLABLE"> <!-- 프로시저 부를때 {}사용 --> <!-- statementType="CALLABLE"이것도 써야함. -->
		{ 
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer} <!-- 출력은 붙여줘야함 -->
			)
		}
	</select>
	
	
	
	<!-- FilmList -->
	<select id="selectFilmList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			FID,
			title,
			category,
			price,
			rating
		FROM
			film_list
		<where> <!-- WHERE문 안에 IF문 중복해서 생성 가능 -->
			<if test="categoryName != null"> <!-- 조건 안에는 자바코드식 -->
				AND category = #{categoryName}
			</if>
			
			<if test="price != null">
				AND price = #{price}
			</if>
			
			<if test="rating != null">
				AND rating = #{rating}
			</if>
			
			<if test="searchWord != null">
				AND title LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			
			<if test="searchActors != null">
				AND actors LIKE CONCAT('%', #{searchActors}, '%')
			</if>
		</where>
		ORDER BY FID ASC
		LIMIT #{beginRow}, #{rowPerPage}		
	</select>
	
	

	<!-- FilmTotal () , selectList보여줄 때 total도 필요함 -->
	<select id="selectFilmTotal" parameterType="String" resultType="int">
		SELECT 
			COUNT(*)
		FROM 
			nicer_but_slower_film_list
		<where>
			<if test="searchWord != null "> <!-- null이 아닐때 -->
				title LIKE CONCAT('%', #{searchWord}, '%')
			</if>	
		</where>	
	</select>
	
	
	<!-- FilmOne -->
	<select id="selectFilmOne" parameterType="int" resultType="java.util.Map">
		SELECT
			f.film_id filmId,
			f.title title,
			f.description description,
			YEAR(f.release_year) releaseYear,
			l.name language,
			f.original_language_id originalLaguageId,
			f.rental_duration rentalDuration,
			f.rental_rate rentalRate,
			f.length length,
			f.replacement_cost replacementCost,
			f.rating rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate,
			v.actors actors
		FROM
			film f 
				LEFT JOIN nicer_but_slower_film_list v ON f.film_id = v.FID
				JOIN language l ON f.language_id = l.language_id
		WHERE
			film_id = #{filmId}
	</select>
	
</mapper>